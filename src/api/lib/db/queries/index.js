import batchInsertQuery from './batchInsert';
import batchUpdateQuery from './batchUpdate';
import batchDeleteQuery from './batchDelete';
import existsQuery from './exists';
import hasChangeQuery from './hasChange';
import insertOneQuery from './insertOne';
import removeOneQuery from './removeOne';
import selectQuery from './select';
import selectPageQuery from './selectPage';
import updateOneQuery from './updateOne';
import versionQuery from './version';

const base = (
    client,
    tableName,
    exposedFields,
    searchableFieldsList,
    sortableFieldsList,
    idOptions = {},
    extraOptions = {}
) => {
    const idFieldName = idOptions.name || 'id';
    const idAutoGenerated = !!idOptions.autogenerated;

    const historyTable = extraOptions.historyTable;
    const watchedFields = extraOptions.watchedFields || exposedFields;

    const searchableFields = searchableFieldsList || exposedFields;
    const sortableFields = sortableFieldsList || exposedFields;

    const select = selectQuery(
        client,
        tableName,
        exposedFields,
        idFieldName
    );

    const selectPage = selectPageQuery(
        client,
        tableName,
        exposedFields,
        searchableFields,
        sortableFields,
        idOptions,
        extraOptions
    );

    const version = historyTable ? versionQuery(
        client,
        tableName,
        historyTable,
        exposedFields,
        idFieldName,
        idAutoGenerated
    ) : null;

    const batchInsert = batchInsertQuery(
        client,
        tableName,
        exposedFields,
        idFieldName,
        idAutoGenerated,
        version
    );

    const batchUpdate = batchUpdateQuery(
        client,
        tableName,
        exposedFields,
        idFieldName
    );

    const batchDelete = batchDeleteQuery(
        client,
        tableName,
        exposedFields,
        idFieldName
    );

    const insertOne = insertOneQuery(
        client,
        tableName,
        exposedFields,
        idAutoGenerated,
        idFieldName,
        version
    );

    const hasChange = hasChangeQuery(select, watchedFields);

    const updateOne = updateOneQuery(
        client,
        tableName,
        exposedFields,
        idFieldName,
        idAutoGenerated,
        version,
        hasChange
    );

    const removeOne = removeOneQuery(
        client,
        tableName,
        exposedFields,
        idFieldName,
        version
    );

    const exists = existsQuery(client, tableName, idFieldName);

    return {
        selectAll: select.selectAll,
        selectOneById: select.selectOneById,
        countAll: select.countAll,
        refresh: select.refresh,
        selectPage,
        batchDelete,
        batchInsert,
        batchUpdate,
        insertOne,
        updateOne,
        removeOne,
        exists,
        version,
        hasChange,
    };
};

base.getFormattedDateField = function getFormattedDateField(fieldName, asName = fieldName) {
    return `to_char(${fieldName} at time zone 'UTC', 'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"') as ${asName}`;
};

export default base;
